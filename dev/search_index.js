var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ACEmd","category":"page"},{"location":"#ACEmd","page":"Home","title":"ACEmd","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ACEmd.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The main structure is now functional, but testing is still needed.","category":"page"},{"location":"#Example-use-case","page":"Home","title":"Example use case","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using ACEmd\nusing AtomsBase\nusing ExtXYZ\n\n# Load potential and atomic structure\nfname_ace = joinpath(pkgdir(ACEmd), \"data\", \"TiAl.json\")\nfname_xyz = joinpath(pkgdir(ACEmd), \"data\", \"TiAl-big.xyz\")\n\ndata = FastSystem(ExtXYZ.Atoms(read_frame(fname_xyz)))\npot = load_ace_model(fname_ace)\n\n# use ACE to calculate...\nace_energy(pot, data)\nace_forces(pot, data)\nace_virial(pot, data)","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ACEmd]","category":"page"},{"location":"molly/#ACE-in-Molly","page":"Using ACE in Molly","title":"ACE in Molly","text":"","category":"section"},{"location":"molly/","page":"Using ACE in Molly","title":"Using ACE in Molly","text":"ACE support for Molly is loaded with Julia package extensions. To use you need to use at least v1.9 of Julia. You also need to have both Molly and ACEapi added to the environment you are using, for extension to be loaded.","category":"page"},{"location":"molly/","page":"Using ACE in Molly","title":"Using ACE in Molly","text":"There are couple of notes that need to be understood.","category":"page"},{"location":"molly/","page":"Using ACE in Molly","title":"Using ACE in Molly","text":"Default unit for energy in Molly is kJ/mol. You need to change this to anything that is not per mole (same for force units)\nAs of writing this Molly does not have fully compatible AtomsBase interface. So building System structure is a bit clunky. Most of all, atoms_data needs to have defined element for atomic symbol and Z for nuclear charge. As these are needed by ACE.","category":"page"},{"location":"molly/#Example","page":"Using ACE in Molly","title":"Example","text":"","category":"section"},{"location":"molly/","page":"Using ACE in Molly","title":"Using ACE in Molly","text":"using Molly\nusing ACEmd\n\nusing AtomsBase\nusing ExtXYZ\nusing Unitful\n\n\n# Load ACE data and initial structure\nfname_ace = joinpath(pkgdir(ACEmd), \"data\", \"TiAl.json\")\nfname_xyz = joinpath(pkgdir(ACEmd), \"data\", \"TiAl-big.xyz\")\n\ndata = FastSystem(ExtXYZ.Atoms(read_frame(fname_xyz)))\npot = load_ace_model(fname_ace)\n\n# Prepare data to Molly compatible format\natoms = [Molly.Atom( index=i, mass=atomic_mass(data, i) ) for i in 1:length(data) ]\n\nboundary = begin\n    box = bounding_box(data)\n    CubicBoundary(box[1][1], box[2][2], box[3][3])\nend\n\natom_data = [ (; :Z=>z,:element=>s)  for (z,s) in zip(atomic_number(data), atomic_symbol(data))  ]\n\n# Set up temperature and velocities\ntemp = 298.0u\"K\"\nvelocities = [random_velocity(m, temp) for m in atomic_mass(data)]\n\n# Set up simulator\nsimulator = VelocityVerlet(\n    dt=1.0u\"fs\",\n    coupling=AndersenThermostat(temp, 1.0u\"ps\"),\n)\n\n# Set up Molly system\nsys = System(\n           atoms=atoms,\n           atoms_data = atom_data,\n           coords=position(data),\n           velocities=velocities,\n           general_inters = (pot,),\n           boundary=boundary,\n           loggers=(temp=TemperatureLogger(100),),\n           energy_units=u\"eV\",\n           force_units=u\"eV/Ã…\",\n       )\n\n\n# Perform MD\nsimulate!(sys, simulator, 1000)","category":"page"}]
}
